var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React from 'react';
import PropTypes from 'prop-types';
import Route from 'react-router/Route';
import matchRoutes from './helpers/matchRoutes';
import makeInjectable from './helpers/makeInjectable';

var ConfigSwitch = function ConfigSwitch(_ref, _ref2) {
  var routes = _ref.routes,
      location = _ref.location;
  var router = _ref2.router;
  var parent = router.route;

  var currentLocation = location || parent.location;

  var _matchRoutes = matchRoutes(routes, currentLocation.pathname, parent),
      match = _matchRoutes.match,
      route = _matchRoutes.route;

  var routeProps = match ? makeInjectable(route) : route;
  return match ? React.createElement(Route, _extends({}, routeProps, { location: currentLocation, computedMatch: match })) : null;
};

ConfigSwitch.propTypes = {
  routes: PropTypes.array.isRequired,
  location: PropTypes.shape({
    pathname: PropTypes.string.isRequired
  })
};

ConfigSwitch.contextTypes = {
  router: PropTypes.shape({
    route: PropTypes.shape({
      location: PropTypes.object.isRequired
    }).isRequired
  }).isRequired
};

export default ConfigSwitch;