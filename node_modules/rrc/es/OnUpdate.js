function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

var OnUpdate = function (_Component) {
  _inherits(OnUpdate, _Component);

  function OnUpdate() {
    var _temp, _this, _ret;

    _classCallCheck(this, OnUpdate);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.call = function (location) {
      _this.props.call(location);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  OnUpdate.prototype.componentDidMount = function componentDidMount() {
    var history = this.context.router.history;

    this.unlisten = history.listen(this.call);

    if (this.props.immediate) {
      this.call(history.location);
    }
  };

  OnUpdate.prototype.componentWillUnmount = function componentWillUnmount() {
    if (this.unlisten) {
      this.unlisten();
    }
  };

  OnUpdate.prototype.render = function render() {
    return null;
  };

  return OnUpdate;
}(Component);

OnUpdate.contextTypes = {
  router: PropTypes.shape({
    history: PropTypes.shape({
      listen: PropTypes.func.isRequired,
      location: PropTypes.object.isRequired
    }).isRequired
  }).isRequired
};
OnUpdate.propTypes = {
  call: PropTypes.func.isRequired,
  immediate: PropTypes.bool
};


export default OnUpdate;