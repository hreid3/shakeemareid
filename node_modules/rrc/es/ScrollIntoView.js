function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';

var ScrollIntoView = function (_Component) {
  _inherits(ScrollIntoView, _Component);

  function ScrollIntoView() {
    _classCallCheck(this, ScrollIntoView);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  ScrollIntoView.prototype.componentDidMount = function componentDidMount() {
    this.scroll();
  };

  ScrollIntoView.prototype.componentDidUpdate = function componentDidUpdate() {
    this.scroll();
  };

  ScrollIntoView.prototype.scroll = function scroll() {
    var _props = this.props,
        id = _props.id,
        alignToTop = _props.alignToTop;

    if (!id) {
      return;
    }

    var element = document.querySelector(id);
    if (element && element.scrollIntoView) {
      setTimeout(function () {
        element.scrollIntoView(alignToTop);
      }, 0);
    }
  };

  ScrollIntoView.prototype.render = function render() {
    return this.props.children ? this.props.children : null;
  };

  return ScrollIntoView;
}(Component);

ScrollIntoView.defaultProps = {
  alignToTop: true
};
ScrollIntoView.propTypes = {
  alignToTop: PropTypes.bool,
  children: PropTypes.node,
  id: PropTypes.string
};
export default ScrollIntoView;