function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import { Component } from 'react';
import PropTypes from 'prop-types';

var Status = function (_Component) {
  _inherits(Status, _Component);

  function Status() {
    _classCallCheck(this, Status);

    return _possibleConstructorReturn(this, _Component.apply(this, arguments));
  }

  Status.prototype.componentWillMount = function componentWillMount() {
    var staticContext = this.context.router.staticContext;

    if (staticContext) {
      staticContext.status = this.props.code;
    }
  };

  Status.prototype.render = function render() {
    return null;
  };

  return Status;
}(Component);

Status.contextTypes = {
  router: PropTypes.shape({
    staticContext: PropTypes.object
  }).isRequired
};
Status.propTypes = {
  code: PropTypes.string.isRequired
};


export default Status;