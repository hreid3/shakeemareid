var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React from 'react';
import warning from 'warning';

export default (function (route) {
  if (!route.inject) {
    return route;
  } else if (!route.component) {
    warning(false, 'The inject property can only be used with the component property of a route');
    return route;
  }
  var routeCopy = Object.assign({}, route, {
    render: function render(props) {
      return React.createElement(route.component, _extends({}, props, route.inject));
    }
  });
  delete routeCopy.component;
  return routeCopy;
});