var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import Route from 'react-router/Route';
import matchPath from 'react-router/matchPath';
import matchRoutes from './helpers/matchRoutes';
import getDisplayName from './helpers/getDisplayName';
import makeInjectable from './helpers/makeInjectable';

var wrapSwitch = function wrapSwitch(Wrapper) {
  var WrappedSwitch = function WrappedSwitch(_ref, _ref2) {
    var router = _ref2.router;

    var routes = _ref.routes,
        location = _ref.location,
        getKey = _ref.getKey,
        wrapperProps = _objectWithoutProperties(_ref, ['routes', 'location', 'getKey']);

    var parent = router.route;

    var loc = location || parent.location;

    var _matchRoutes = matchRoutes(routes, loc.pathname, parent),
        match = _matchRoutes.match,
        route = _matchRoutes.route;

    var routeProps = match ? makeInjectable(route) : route;
    return React.createElement(
      Wrapper,
      wrapperProps,
      match ? React.createElement(Route, _extends({
        key: getKey(match, route, loc)
      }, routeProps, {
        location: loc,
        computedMatch: match
      })) : null
    );
  };

  WrappedSwitch.propTypes = {
    routes: PropTypes.array.isRequired,
    location: PropTypes.shape({
      pathname: PropTypes.string.isRequired
    }),
    getKey: PropTypes.func
  };

  WrappedSwitch.defaultProps = {
    getKey: function getKey(match) {
      return match && match.url;
    }
  };

  WrappedSwitch.contextTypes = {
    router: PropTypes.shape({
      route: PropTypes.shape({
        location: PropTypes.object.isRequired
      }).isRequired
    }).isRequired
  };

  WrappedSwitch.displayName = 'wrapSwitch(' + getDisplayName(Wrapper) + ')';

  return WrappedSwitch;
};

export default wrapSwitch;